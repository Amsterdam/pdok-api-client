# coding: utf-8

"""
    Locatieserver

    De PDOK Locatieserver is een open en gratis geocodeerservice waarmee gezocht kan worden op gegevens uit verschillende overheidsregistraties (bijvoorbeeld adressen, percelen en rijkswegen) om vervolgens doorgestuurd te worden naar de locatie van de zoekopdracht.  De Locatieserver bestaat uit meerdere RESTful API's die eenvoudig geïntegreerd kunnen worden in viewers en/of applicaties. De API's zijn open, gratis en bevatten gegevens uit verschillende overheidsregistraties zoals adressen (postcodes, straten, huisnummer), kadastrale percelen, wegen en hectometerpalen maar ook woonplaatsen, wijken, buurten en waterschappen. De onderliggende gegevens worden zeer frequent bijgewerkt.  De Locatieserver bestaat totaal uit vier RESTful API's die gepubliceerd worden volgens de Open API Specificatie [https://api.pdok.nl/bzk/locatieserver/search/v3_1/ui/](https://api.pdok.nl/bzk/locatieserver/search/v3_1/ui/). Hiermee zijn de mogelijkheden van de Locatieserver API's (input en output) gedocumenteerd.  Het zoeken op gegevens wordt vereenvoudigd met behulp van de **Suggest API** die de mogelijkheid biedt om een (gedeelte van een) zoekopdracht op te voeren, waarnaar er suggesties teruggegeven worden. Dankzij slimme technieken als auto-aanvullen en ondersteuning van alternatieve schrijfwijzen en synoniemen vinden gebruikers snel waar ze naar op zoek zijn. Het is ook mogelijk om bij zoekopdrachten een locatie van de gebruiker mee te geven zodat suggesties op basis van die locatie worden gesorteerd.  Zodra er op basis van suggesties van de Suggest API een keuze is gemaakt, wordt de **Lookup API** aangeroepen, welke o.a. een (versimpelde) geometrie van de zoekopdracht teruggeeft. Hiermee kan een gebruiker naar de locatie van de zoekopdracht worden gestuurd op de kaart. Dankzij de highlight functie kan het betreffende gegeven (object) vervolgens worden opgelicht op de kaart.  De suggest- en de lookup API werken dus als een tweetrapsraket. Er is ook een mogelijkheid om vrij te zoeken (klassiek geocoderen) met de **Free API** waar zonder tussenkomst van suggesties de API direct resultaten teruggeeft op basis van de zoekopdracht.  De **Reverse API** biedt de mogelijkheid om een locatie (punt geometrie) op te geven om vervolgens verschillende gegevens in een range rondom deze locatie te ontvangen. Bijvoorbeeld het ophalen van alle adressen of wegen in de buurt (op basis van de opgegeven locatie). Dit wordt ook wel Reverse Geocoderen genoemd. Met de **Reverse API** kan je op basis van een coördinaat en een range (bijvoorbeeld 1 kilometer) de gewenste gegevens binnen die range opvragen en visualiseren.  De Locatieserver is primair een geocodeerservice. Voor andere doeleinden zoals het rechtstreeks opvragen van bepaalde gegevens of het downloaden van bulk data biedt PDOK andere mogelijkheden via webservices en/of downloads.  Meer informatie over de Locatieserver is ook te vinden op de Locatieserver Wiki op [Github](https://github.com/PDOK/locatieserver/wiki/API-Locatieserver) of volg discussies op het [PDOK forum](https://geoforum.nl/c/applicaties-en-diensten/locatieserver/27). 

    The version of the OpenAPI document: v3_1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import List, Optional, Union
from typing_extensions import Annotated
from pdok_api_client.models.free200_response import Free200Response
from pdok_api_client.models.suggest200_response import Suggest200Response

from pdok_api_client.api_client import ApiClient, RequestSerialized
from pdok_api_client.api_response import ApiResponse
from pdok_api_client.rest import RESTResponseType


class LocatieserverApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    async def free(
        self,
        q: Annotated[Optional[Annotated[str, Field(strict=True, max_length=400)]], Field(description="Hiermee worden de zoektermen opgegeven. De Solr-syntax voor zoektermen kan hier worden toegepast, bijv. combineren met \"and\", en het gebruik van dubbele quotes voor opeenvolgende zoektermen. Zoektermen mogen incompleet zijn. Ook wordt er gebruik gemaakt van synoniemen.  Voorbeelden: `q=Utrecht`: geeft resultaten terug met de zoekterm Utrecht, bijv. adressen in de stad Utrecht, woonplaatsen en gemeenten in de provincie Utrecht.  `q=\"De Bilt\"`: geeft resultaten terug met de zoekterm De Bilt, bijv. de woonplaats en gemeente De Bilt, of adressen in deze woonplaats. Let op dat bij het daadwerkelijk verzenden van het request onder water de URL-encodingregels toegepast worden, dus een spatie wordt verzonden als een plusteken.  `q=\"Sint Jacob\" Utre`: geeft o.a. adressen terug waarvan er delen achtereenvolgens beginnen met \"Sint\" en \"Jacob\", of met \"St\" (synoniem) en \"Jacob\", en waar ook een deel met \"Utre\" begint. Een voorbeeld is het adres St.-Jacobsstraat 200 (officiële schrijfwijze) in Utrecht. ")] = None,
        lat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Hiermee kan een coördinaat (in lat/lon, ofwel WGS84) worden opgegeven. Met behulp van deze parameters worden de gevonden zoekresultaten gesorteerd op afstand van het meegegeven punt. Wanneer de locatie van de gebruiker bekend is, kan op deze manier effectiever worden gezocht.  Het meegeven van een coördinaat is met name nuttig voor de suggest- en vrije geocoder-services. Hier worden meestal meerdere resultaten teruggegeven. Als decimaal scheidingsteken moet een punt worden opgegeven i.p.v. een komma. ")] = None,
        lon: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Hiermee kan een coördinaat (in lat/lon, ofwel WGS84) worden opgegeven. Met behulp van deze parameters worden de gevonden zoekresultaten gesorteerd op afstand van het meegegeven punt. Wanneer de locatie van de gebruiker bekend is, kan op deze manier effectiever worden gezocht.  Het meegeven van een coördinaat is met name nuttig voor de suggest- en vrije geocoder-services. Hier worden meestal meerdere resultaten teruggegeven. Als decimaal scheidingsteken moet een punt worden opgegeven i.p.v. een komma.  Voorbeeld: `lat=52.09&lon=5.12`  De resultaten worden gesorteerd op afstand van een bepaald punt in het centrum van Utrecht. ")] = None,
        fl: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Hiermee worden de velden opgegeven die teruggegeven dienen te worden.")] = None,
        fq: Annotated[Optional[List[StrictStr]], Field(description="Hiermee kan een filter query worden opgegeven, bijv. `fq=bron:BAG`.")] = None,
        df: Annotated[Optional[StrictStr], Field(description="Hiermee wordt het default zoekveld opgegeven. Dit is het veld waar standaard in gezocht wordt, wanneer de veldnaam niet wordt meegegeven. ")] = None,
        qf: Annotated[Optional[StrictStr], Field(description="Met behulp van deze parameter kan aan bepaalde _velden_ een extra boost worden meegegeven. Hiermee kan de scoreberekening worden aangepast. ")] = None,
        bq: Annotated[Optional[List[StrictStr]], Field(description="Met behulp van deze parameter kan aan bepaalde _veldwaarden_ een extra boost worden meegegeven. Ook hiermee kan de scoreberekening worden aangepast.  Voor elke boost query moet een aparte `bq=<boost>` worden gebruikt. Bijvoorbeeld: `bq=type:gemeente^1.5&bq=type:woonplaats^1.5`. ")] = None,
        start: Annotated[Optional[Annotated[int, Field(le=10000, strict=True)]], Field(description="Hiermee wordt opgegeven wat de index is van het eerste resultaat dat teruggegeven wordt. Dit is zero-based. In combinatie met de rows-parameter kunnen deze services gepagineerd worden bevraagd. Het maximum is \"10.000\". ")] = None,
        rows: Annotated[Optional[Annotated[int, Field(le=100, strict=True)]], Field(description="Hiermee wordt opgegeven wat het maximale aantal rijen (ofwel resultaten) is dat teruggegeven moet worden op deze bevraging. Het maximum is \"100\". ")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Hiermee kan worden opgegeven hoe de sortering plaatsvindt.")] = None,
        wt: Annotated[Optional[StrictStr], Field(description="Hiermee wordt opgegeven wat het outputformaat is van de bevraging.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Free200Response:
        """De Free API biedt de mogelijkheid om vrij te zoeken (klassiek geocoderen), waar zonder tussenkomst van suggesties de API direct resultaten teruggeeft op basis van de zoekopdracht. 


        :param q: Hiermee worden de zoektermen opgegeven. De Solr-syntax voor zoektermen kan hier worden toegepast, bijv. combineren met \"and\", en het gebruik van dubbele quotes voor opeenvolgende zoektermen. Zoektermen mogen incompleet zijn. Ook wordt er gebruik gemaakt van synoniemen.  Voorbeelden: `q=Utrecht`: geeft resultaten terug met de zoekterm Utrecht, bijv. adressen in de stad Utrecht, woonplaatsen en gemeenten in de provincie Utrecht.  `q=\"De Bilt\"`: geeft resultaten terug met de zoekterm De Bilt, bijv. de woonplaats en gemeente De Bilt, of adressen in deze woonplaats. Let op dat bij het daadwerkelijk verzenden van het request onder water de URL-encodingregels toegepast worden, dus een spatie wordt verzonden als een plusteken.  `q=\"Sint Jacob\" Utre`: geeft o.a. adressen terug waarvan er delen achtereenvolgens beginnen met \"Sint\" en \"Jacob\", of met \"St\" (synoniem) en \"Jacob\", en waar ook een deel met \"Utre\" begint. Een voorbeeld is het adres St.-Jacobsstraat 200 (officiële schrijfwijze) in Utrecht. 
        :type q: str
        :param lat: Hiermee kan een coördinaat (in lat/lon, ofwel WGS84) worden opgegeven. Met behulp van deze parameters worden de gevonden zoekresultaten gesorteerd op afstand van het meegegeven punt. Wanneer de locatie van de gebruiker bekend is, kan op deze manier effectiever worden gezocht.  Het meegeven van een coördinaat is met name nuttig voor de suggest- en vrije geocoder-services. Hier worden meestal meerdere resultaten teruggegeven. Als decimaal scheidingsteken moet een punt worden opgegeven i.p.v. een komma. 
        :type lat: float
        :param lon: Hiermee kan een coördinaat (in lat/lon, ofwel WGS84) worden opgegeven. Met behulp van deze parameters worden de gevonden zoekresultaten gesorteerd op afstand van het meegegeven punt. Wanneer de locatie van de gebruiker bekend is, kan op deze manier effectiever worden gezocht.  Het meegeven van een coördinaat is met name nuttig voor de suggest- en vrije geocoder-services. Hier worden meestal meerdere resultaten teruggegeven. Als decimaal scheidingsteken moet een punt worden opgegeven i.p.v. een komma.  Voorbeeld: `lat=52.09&lon=5.12`  De resultaten worden gesorteerd op afstand van een bepaald punt in het centrum van Utrecht. 
        :type lon: float
        :param fl: Hiermee worden de velden opgegeven die teruggegeven dienen te worden.
        :type fl: str
        :param fq: Hiermee kan een filter query worden opgegeven, bijv. `fq=bron:BAG`.
        :type fq: List[str]
        :param df: Hiermee wordt het default zoekveld opgegeven. Dit is het veld waar standaard in gezocht wordt, wanneer de veldnaam niet wordt meegegeven. 
        :type df: str
        :param qf: Met behulp van deze parameter kan aan bepaalde _velden_ een extra boost worden meegegeven. Hiermee kan de scoreberekening worden aangepast. 
        :type qf: str
        :param bq: Met behulp van deze parameter kan aan bepaalde _veldwaarden_ een extra boost worden meegegeven. Ook hiermee kan de scoreberekening worden aangepast.  Voor elke boost query moet een aparte `bq=<boost>` worden gebruikt. Bijvoorbeeld: `bq=type:gemeente^1.5&bq=type:woonplaats^1.5`. 
        :type bq: List[str]
        :param start: Hiermee wordt opgegeven wat de index is van het eerste resultaat dat teruggegeven wordt. Dit is zero-based. In combinatie met de rows-parameter kunnen deze services gepagineerd worden bevraagd. Het maximum is \"10.000\". 
        :type start: int
        :param rows: Hiermee wordt opgegeven wat het maximale aantal rijen (ofwel resultaten) is dat teruggegeven moet worden op deze bevraging. Het maximum is \"100\". 
        :type rows: int
        :param sort: Hiermee kan worden opgegeven hoe de sortering plaatsvindt.
        :type sort: str
        :param wt: Hiermee wordt opgegeven wat het outputformaat is van de bevraging.
        :type wt: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._free_serialize(
            q=q,
            lat=lat,
            lon=lon,
            fl=fl,
            fq=fq,
            df=df,
            qf=qf,
            bq=bq,
            start=start,
            rows=rows,
            sort=sort,
            wt=wt,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Free200Response",
            '400': "Free400Response",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def free_with_http_info(
        self,
        q: Annotated[Optional[Annotated[str, Field(strict=True, max_length=400)]], Field(description="Hiermee worden de zoektermen opgegeven. De Solr-syntax voor zoektermen kan hier worden toegepast, bijv. combineren met \"and\", en het gebruik van dubbele quotes voor opeenvolgende zoektermen. Zoektermen mogen incompleet zijn. Ook wordt er gebruik gemaakt van synoniemen.  Voorbeelden: `q=Utrecht`: geeft resultaten terug met de zoekterm Utrecht, bijv. adressen in de stad Utrecht, woonplaatsen en gemeenten in de provincie Utrecht.  `q=\"De Bilt\"`: geeft resultaten terug met de zoekterm De Bilt, bijv. de woonplaats en gemeente De Bilt, of adressen in deze woonplaats. Let op dat bij het daadwerkelijk verzenden van het request onder water de URL-encodingregels toegepast worden, dus een spatie wordt verzonden als een plusteken.  `q=\"Sint Jacob\" Utre`: geeft o.a. adressen terug waarvan er delen achtereenvolgens beginnen met \"Sint\" en \"Jacob\", of met \"St\" (synoniem) en \"Jacob\", en waar ook een deel met \"Utre\" begint. Een voorbeeld is het adres St.-Jacobsstraat 200 (officiële schrijfwijze) in Utrecht. ")] = None,
        lat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Hiermee kan een coördinaat (in lat/lon, ofwel WGS84) worden opgegeven. Met behulp van deze parameters worden de gevonden zoekresultaten gesorteerd op afstand van het meegegeven punt. Wanneer de locatie van de gebruiker bekend is, kan op deze manier effectiever worden gezocht.  Het meegeven van een coördinaat is met name nuttig voor de suggest- en vrije geocoder-services. Hier worden meestal meerdere resultaten teruggegeven. Als decimaal scheidingsteken moet een punt worden opgegeven i.p.v. een komma. ")] = None,
        lon: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Hiermee kan een coördinaat (in lat/lon, ofwel WGS84) worden opgegeven. Met behulp van deze parameters worden de gevonden zoekresultaten gesorteerd op afstand van het meegegeven punt. Wanneer de locatie van de gebruiker bekend is, kan op deze manier effectiever worden gezocht.  Het meegeven van een coördinaat is met name nuttig voor de suggest- en vrije geocoder-services. Hier worden meestal meerdere resultaten teruggegeven. Als decimaal scheidingsteken moet een punt worden opgegeven i.p.v. een komma.  Voorbeeld: `lat=52.09&lon=5.12`  De resultaten worden gesorteerd op afstand van een bepaald punt in het centrum van Utrecht. ")] = None,
        fl: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Hiermee worden de velden opgegeven die teruggegeven dienen te worden.")] = None,
        fq: Annotated[Optional[List[StrictStr]], Field(description="Hiermee kan een filter query worden opgegeven, bijv. `fq=bron:BAG`.")] = None,
        df: Annotated[Optional[StrictStr], Field(description="Hiermee wordt het default zoekveld opgegeven. Dit is het veld waar standaard in gezocht wordt, wanneer de veldnaam niet wordt meegegeven. ")] = None,
        qf: Annotated[Optional[StrictStr], Field(description="Met behulp van deze parameter kan aan bepaalde _velden_ een extra boost worden meegegeven. Hiermee kan de scoreberekening worden aangepast. ")] = None,
        bq: Annotated[Optional[List[StrictStr]], Field(description="Met behulp van deze parameter kan aan bepaalde _veldwaarden_ een extra boost worden meegegeven. Ook hiermee kan de scoreberekening worden aangepast.  Voor elke boost query moet een aparte `bq=<boost>` worden gebruikt. Bijvoorbeeld: `bq=type:gemeente^1.5&bq=type:woonplaats^1.5`. ")] = None,
        start: Annotated[Optional[Annotated[int, Field(le=10000, strict=True)]], Field(description="Hiermee wordt opgegeven wat de index is van het eerste resultaat dat teruggegeven wordt. Dit is zero-based. In combinatie met de rows-parameter kunnen deze services gepagineerd worden bevraagd. Het maximum is \"10.000\". ")] = None,
        rows: Annotated[Optional[Annotated[int, Field(le=100, strict=True)]], Field(description="Hiermee wordt opgegeven wat het maximale aantal rijen (ofwel resultaten) is dat teruggegeven moet worden op deze bevraging. Het maximum is \"100\". ")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Hiermee kan worden opgegeven hoe de sortering plaatsvindt.")] = None,
        wt: Annotated[Optional[StrictStr], Field(description="Hiermee wordt opgegeven wat het outputformaat is van de bevraging.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Free200Response]:
        """De Free API biedt de mogelijkheid om vrij te zoeken (klassiek geocoderen), waar zonder tussenkomst van suggesties de API direct resultaten teruggeeft op basis van de zoekopdracht. 


        :param q: Hiermee worden de zoektermen opgegeven. De Solr-syntax voor zoektermen kan hier worden toegepast, bijv. combineren met \"and\", en het gebruik van dubbele quotes voor opeenvolgende zoektermen. Zoektermen mogen incompleet zijn. Ook wordt er gebruik gemaakt van synoniemen.  Voorbeelden: `q=Utrecht`: geeft resultaten terug met de zoekterm Utrecht, bijv. adressen in de stad Utrecht, woonplaatsen en gemeenten in de provincie Utrecht.  `q=\"De Bilt\"`: geeft resultaten terug met de zoekterm De Bilt, bijv. de woonplaats en gemeente De Bilt, of adressen in deze woonplaats. Let op dat bij het daadwerkelijk verzenden van het request onder water de URL-encodingregels toegepast worden, dus een spatie wordt verzonden als een plusteken.  `q=\"Sint Jacob\" Utre`: geeft o.a. adressen terug waarvan er delen achtereenvolgens beginnen met \"Sint\" en \"Jacob\", of met \"St\" (synoniem) en \"Jacob\", en waar ook een deel met \"Utre\" begint. Een voorbeeld is het adres St.-Jacobsstraat 200 (officiële schrijfwijze) in Utrecht. 
        :type q: str
        :param lat: Hiermee kan een coördinaat (in lat/lon, ofwel WGS84) worden opgegeven. Met behulp van deze parameters worden de gevonden zoekresultaten gesorteerd op afstand van het meegegeven punt. Wanneer de locatie van de gebruiker bekend is, kan op deze manier effectiever worden gezocht.  Het meegeven van een coördinaat is met name nuttig voor de suggest- en vrije geocoder-services. Hier worden meestal meerdere resultaten teruggegeven. Als decimaal scheidingsteken moet een punt worden opgegeven i.p.v. een komma. 
        :type lat: float
        :param lon: Hiermee kan een coördinaat (in lat/lon, ofwel WGS84) worden opgegeven. Met behulp van deze parameters worden de gevonden zoekresultaten gesorteerd op afstand van het meegegeven punt. Wanneer de locatie van de gebruiker bekend is, kan op deze manier effectiever worden gezocht.  Het meegeven van een coördinaat is met name nuttig voor de suggest- en vrije geocoder-services. Hier worden meestal meerdere resultaten teruggegeven. Als decimaal scheidingsteken moet een punt worden opgegeven i.p.v. een komma.  Voorbeeld: `lat=52.09&lon=5.12`  De resultaten worden gesorteerd op afstand van een bepaald punt in het centrum van Utrecht. 
        :type lon: float
        :param fl: Hiermee worden de velden opgegeven die teruggegeven dienen te worden.
        :type fl: str
        :param fq: Hiermee kan een filter query worden opgegeven, bijv. `fq=bron:BAG`.
        :type fq: List[str]
        :param df: Hiermee wordt het default zoekveld opgegeven. Dit is het veld waar standaard in gezocht wordt, wanneer de veldnaam niet wordt meegegeven. 
        :type df: str
        :param qf: Met behulp van deze parameter kan aan bepaalde _velden_ een extra boost worden meegegeven. Hiermee kan de scoreberekening worden aangepast. 
        :type qf: str
        :param bq: Met behulp van deze parameter kan aan bepaalde _veldwaarden_ een extra boost worden meegegeven. Ook hiermee kan de scoreberekening worden aangepast.  Voor elke boost query moet een aparte `bq=<boost>` worden gebruikt. Bijvoorbeeld: `bq=type:gemeente^1.5&bq=type:woonplaats^1.5`. 
        :type bq: List[str]
        :param start: Hiermee wordt opgegeven wat de index is van het eerste resultaat dat teruggegeven wordt. Dit is zero-based. In combinatie met de rows-parameter kunnen deze services gepagineerd worden bevraagd. Het maximum is \"10.000\". 
        :type start: int
        :param rows: Hiermee wordt opgegeven wat het maximale aantal rijen (ofwel resultaten) is dat teruggegeven moet worden op deze bevraging. Het maximum is \"100\". 
        :type rows: int
        :param sort: Hiermee kan worden opgegeven hoe de sortering plaatsvindt.
        :type sort: str
        :param wt: Hiermee wordt opgegeven wat het outputformaat is van de bevraging.
        :type wt: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._free_serialize(
            q=q,
            lat=lat,
            lon=lon,
            fl=fl,
            fq=fq,
            df=df,
            qf=qf,
            bq=bq,
            start=start,
            rows=rows,
            sort=sort,
            wt=wt,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Free200Response",
            '400': "Free400Response",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def free_without_preload_content(
        self,
        q: Annotated[Optional[Annotated[str, Field(strict=True, max_length=400)]], Field(description="Hiermee worden de zoektermen opgegeven. De Solr-syntax voor zoektermen kan hier worden toegepast, bijv. combineren met \"and\", en het gebruik van dubbele quotes voor opeenvolgende zoektermen. Zoektermen mogen incompleet zijn. Ook wordt er gebruik gemaakt van synoniemen.  Voorbeelden: `q=Utrecht`: geeft resultaten terug met de zoekterm Utrecht, bijv. adressen in de stad Utrecht, woonplaatsen en gemeenten in de provincie Utrecht.  `q=\"De Bilt\"`: geeft resultaten terug met de zoekterm De Bilt, bijv. de woonplaats en gemeente De Bilt, of adressen in deze woonplaats. Let op dat bij het daadwerkelijk verzenden van het request onder water de URL-encodingregels toegepast worden, dus een spatie wordt verzonden als een plusteken.  `q=\"Sint Jacob\" Utre`: geeft o.a. adressen terug waarvan er delen achtereenvolgens beginnen met \"Sint\" en \"Jacob\", of met \"St\" (synoniem) en \"Jacob\", en waar ook een deel met \"Utre\" begint. Een voorbeeld is het adres St.-Jacobsstraat 200 (officiële schrijfwijze) in Utrecht. ")] = None,
        lat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Hiermee kan een coördinaat (in lat/lon, ofwel WGS84) worden opgegeven. Met behulp van deze parameters worden de gevonden zoekresultaten gesorteerd op afstand van het meegegeven punt. Wanneer de locatie van de gebruiker bekend is, kan op deze manier effectiever worden gezocht.  Het meegeven van een coördinaat is met name nuttig voor de suggest- en vrije geocoder-services. Hier worden meestal meerdere resultaten teruggegeven. Als decimaal scheidingsteken moet een punt worden opgegeven i.p.v. een komma. ")] = None,
        lon: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Hiermee kan een coördinaat (in lat/lon, ofwel WGS84) worden opgegeven. Met behulp van deze parameters worden de gevonden zoekresultaten gesorteerd op afstand van het meegegeven punt. Wanneer de locatie van de gebruiker bekend is, kan op deze manier effectiever worden gezocht.  Het meegeven van een coördinaat is met name nuttig voor de suggest- en vrije geocoder-services. Hier worden meestal meerdere resultaten teruggegeven. Als decimaal scheidingsteken moet een punt worden opgegeven i.p.v. een komma.  Voorbeeld: `lat=52.09&lon=5.12`  De resultaten worden gesorteerd op afstand van een bepaald punt in het centrum van Utrecht. ")] = None,
        fl: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Hiermee worden de velden opgegeven die teruggegeven dienen te worden.")] = None,
        fq: Annotated[Optional[List[StrictStr]], Field(description="Hiermee kan een filter query worden opgegeven, bijv. `fq=bron:BAG`.")] = None,
        df: Annotated[Optional[StrictStr], Field(description="Hiermee wordt het default zoekveld opgegeven. Dit is het veld waar standaard in gezocht wordt, wanneer de veldnaam niet wordt meegegeven. ")] = None,
        qf: Annotated[Optional[StrictStr], Field(description="Met behulp van deze parameter kan aan bepaalde _velden_ een extra boost worden meegegeven. Hiermee kan de scoreberekening worden aangepast. ")] = None,
        bq: Annotated[Optional[List[StrictStr]], Field(description="Met behulp van deze parameter kan aan bepaalde _veldwaarden_ een extra boost worden meegegeven. Ook hiermee kan de scoreberekening worden aangepast.  Voor elke boost query moet een aparte `bq=<boost>` worden gebruikt. Bijvoorbeeld: `bq=type:gemeente^1.5&bq=type:woonplaats^1.5`. ")] = None,
        start: Annotated[Optional[Annotated[int, Field(le=10000, strict=True)]], Field(description="Hiermee wordt opgegeven wat de index is van het eerste resultaat dat teruggegeven wordt. Dit is zero-based. In combinatie met de rows-parameter kunnen deze services gepagineerd worden bevraagd. Het maximum is \"10.000\". ")] = None,
        rows: Annotated[Optional[Annotated[int, Field(le=100, strict=True)]], Field(description="Hiermee wordt opgegeven wat het maximale aantal rijen (ofwel resultaten) is dat teruggegeven moet worden op deze bevraging. Het maximum is \"100\". ")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Hiermee kan worden opgegeven hoe de sortering plaatsvindt.")] = None,
        wt: Annotated[Optional[StrictStr], Field(description="Hiermee wordt opgegeven wat het outputformaat is van de bevraging.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """De Free API biedt de mogelijkheid om vrij te zoeken (klassiek geocoderen), waar zonder tussenkomst van suggesties de API direct resultaten teruggeeft op basis van de zoekopdracht. 


        :param q: Hiermee worden de zoektermen opgegeven. De Solr-syntax voor zoektermen kan hier worden toegepast, bijv. combineren met \"and\", en het gebruik van dubbele quotes voor opeenvolgende zoektermen. Zoektermen mogen incompleet zijn. Ook wordt er gebruik gemaakt van synoniemen.  Voorbeelden: `q=Utrecht`: geeft resultaten terug met de zoekterm Utrecht, bijv. adressen in de stad Utrecht, woonplaatsen en gemeenten in de provincie Utrecht.  `q=\"De Bilt\"`: geeft resultaten terug met de zoekterm De Bilt, bijv. de woonplaats en gemeente De Bilt, of adressen in deze woonplaats. Let op dat bij het daadwerkelijk verzenden van het request onder water de URL-encodingregels toegepast worden, dus een spatie wordt verzonden als een plusteken.  `q=\"Sint Jacob\" Utre`: geeft o.a. adressen terug waarvan er delen achtereenvolgens beginnen met \"Sint\" en \"Jacob\", of met \"St\" (synoniem) en \"Jacob\", en waar ook een deel met \"Utre\" begint. Een voorbeeld is het adres St.-Jacobsstraat 200 (officiële schrijfwijze) in Utrecht. 
        :type q: str
        :param lat: Hiermee kan een coördinaat (in lat/lon, ofwel WGS84) worden opgegeven. Met behulp van deze parameters worden de gevonden zoekresultaten gesorteerd op afstand van het meegegeven punt. Wanneer de locatie van de gebruiker bekend is, kan op deze manier effectiever worden gezocht.  Het meegeven van een coördinaat is met name nuttig voor de suggest- en vrije geocoder-services. Hier worden meestal meerdere resultaten teruggegeven. Als decimaal scheidingsteken moet een punt worden opgegeven i.p.v. een komma. 
        :type lat: float
        :param lon: Hiermee kan een coördinaat (in lat/lon, ofwel WGS84) worden opgegeven. Met behulp van deze parameters worden de gevonden zoekresultaten gesorteerd op afstand van het meegegeven punt. Wanneer de locatie van de gebruiker bekend is, kan op deze manier effectiever worden gezocht.  Het meegeven van een coördinaat is met name nuttig voor de suggest- en vrije geocoder-services. Hier worden meestal meerdere resultaten teruggegeven. Als decimaal scheidingsteken moet een punt worden opgegeven i.p.v. een komma.  Voorbeeld: `lat=52.09&lon=5.12`  De resultaten worden gesorteerd op afstand van een bepaald punt in het centrum van Utrecht. 
        :type lon: float
        :param fl: Hiermee worden de velden opgegeven die teruggegeven dienen te worden.
        :type fl: str
        :param fq: Hiermee kan een filter query worden opgegeven, bijv. `fq=bron:BAG`.
        :type fq: List[str]
        :param df: Hiermee wordt het default zoekveld opgegeven. Dit is het veld waar standaard in gezocht wordt, wanneer de veldnaam niet wordt meegegeven. 
        :type df: str
        :param qf: Met behulp van deze parameter kan aan bepaalde _velden_ een extra boost worden meegegeven. Hiermee kan de scoreberekening worden aangepast. 
        :type qf: str
        :param bq: Met behulp van deze parameter kan aan bepaalde _veldwaarden_ een extra boost worden meegegeven. Ook hiermee kan de scoreberekening worden aangepast.  Voor elke boost query moet een aparte `bq=<boost>` worden gebruikt. Bijvoorbeeld: `bq=type:gemeente^1.5&bq=type:woonplaats^1.5`. 
        :type bq: List[str]
        :param start: Hiermee wordt opgegeven wat de index is van het eerste resultaat dat teruggegeven wordt. Dit is zero-based. In combinatie met de rows-parameter kunnen deze services gepagineerd worden bevraagd. Het maximum is \"10.000\". 
        :type start: int
        :param rows: Hiermee wordt opgegeven wat het maximale aantal rijen (ofwel resultaten) is dat teruggegeven moet worden op deze bevraging. Het maximum is \"100\". 
        :type rows: int
        :param sort: Hiermee kan worden opgegeven hoe de sortering plaatsvindt.
        :type sort: str
        :param wt: Hiermee wordt opgegeven wat het outputformaat is van de bevraging.
        :type wt: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._free_serialize(
            q=q,
            lat=lat,
            lon=lon,
            fl=fl,
            fq=fq,
            df=df,
            qf=qf,
            bq=bq,
            start=start,
            rows=rows,
            sort=sort,
            wt=wt,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Free200Response",
            '400': "Free400Response",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _free_serialize(
        self,
        q,
        lat,
        lon,
        fl,
        fq,
        df,
        qf,
        bq,
        start,
        rows,
        sort,
        wt,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fq': 'multi',
            'bq': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if q is not None:
            
            _query_params.append(('q', q))
            
        if lat is not None:
            
            _query_params.append(('lat', lat))
            
        if lon is not None:
            
            _query_params.append(('lon', lon))
            
        if fl is not None:
            
            _query_params.append(('fl', fl))
            
        if fq is not None:
            
            _query_params.append(('fq', fq))
            
        if df is not None:
            
            _query_params.append(('df', df))
            
        if qf is not None:
            
            _query_params.append(('qf', qf))
            
        if bq is not None:
            
            _query_params.append(('bq', bq))
            
        if start is not None:
            
            _query_params.append(('start', start))
            
        if rows is not None:
            
            _query_params.append(('rows', rows))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if wt is not None:
            
            _query_params.append(('wt', wt))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml', 
                    'text/html', 
                    'text/plain'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/free',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def lookup(
        self,
        id: Annotated[StrictStr, Field(description="Hiermee wordt het object-ID opgegeven.")],
        fl: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Hiermee worden de velden opgegeven die teruggegeven dienen te worden.")] = None,
        fq: Annotated[Optional[List[StrictStr]], Field(description="Hiermee kan een filter query worden opgegeven, bijv. `fq=bron:BAG`.")] = None,
        wt: Annotated[Optional[StrictStr], Field(description="Hiermee wordt opgegeven wat het outputformaat is van de bevraging.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Free200Response:
        """Zodra er op basis van suggesties van de Suggest API een keuze is gemaakt, wordt de Lookup API aangeroepen, welke o.a. een (versimpelde) geometrie van de zoekopdracht teruggeeft. 


        :param id: Hiermee wordt het object-ID opgegeven. (required)
        :type id: str
        :param fl: Hiermee worden de velden opgegeven die teruggegeven dienen te worden.
        :type fl: str
        :param fq: Hiermee kan een filter query worden opgegeven, bijv. `fq=bron:BAG`.
        :type fq: List[str]
        :param wt: Hiermee wordt opgegeven wat het outputformaat is van de bevraging.
        :type wt: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._lookup_serialize(
            id=id,
            fl=fl,
            fq=fq,
            wt=wt,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Free200Response",
            '400': "Free400Response",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def lookup_with_http_info(
        self,
        id: Annotated[StrictStr, Field(description="Hiermee wordt het object-ID opgegeven.")],
        fl: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Hiermee worden de velden opgegeven die teruggegeven dienen te worden.")] = None,
        fq: Annotated[Optional[List[StrictStr]], Field(description="Hiermee kan een filter query worden opgegeven, bijv. `fq=bron:BAG`.")] = None,
        wt: Annotated[Optional[StrictStr], Field(description="Hiermee wordt opgegeven wat het outputformaat is van de bevraging.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Free200Response]:
        """Zodra er op basis van suggesties van de Suggest API een keuze is gemaakt, wordt de Lookup API aangeroepen, welke o.a. een (versimpelde) geometrie van de zoekopdracht teruggeeft. 


        :param id: Hiermee wordt het object-ID opgegeven. (required)
        :type id: str
        :param fl: Hiermee worden de velden opgegeven die teruggegeven dienen te worden.
        :type fl: str
        :param fq: Hiermee kan een filter query worden opgegeven, bijv. `fq=bron:BAG`.
        :type fq: List[str]
        :param wt: Hiermee wordt opgegeven wat het outputformaat is van de bevraging.
        :type wt: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._lookup_serialize(
            id=id,
            fl=fl,
            fq=fq,
            wt=wt,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Free200Response",
            '400': "Free400Response",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def lookup_without_preload_content(
        self,
        id: Annotated[StrictStr, Field(description="Hiermee wordt het object-ID opgegeven.")],
        fl: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Hiermee worden de velden opgegeven die teruggegeven dienen te worden.")] = None,
        fq: Annotated[Optional[List[StrictStr]], Field(description="Hiermee kan een filter query worden opgegeven, bijv. `fq=bron:BAG`.")] = None,
        wt: Annotated[Optional[StrictStr], Field(description="Hiermee wordt opgegeven wat het outputformaat is van de bevraging.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Zodra er op basis van suggesties van de Suggest API een keuze is gemaakt, wordt de Lookup API aangeroepen, welke o.a. een (versimpelde) geometrie van de zoekopdracht teruggeeft. 


        :param id: Hiermee wordt het object-ID opgegeven. (required)
        :type id: str
        :param fl: Hiermee worden de velden opgegeven die teruggegeven dienen te worden.
        :type fl: str
        :param fq: Hiermee kan een filter query worden opgegeven, bijv. `fq=bron:BAG`.
        :type fq: List[str]
        :param wt: Hiermee wordt opgegeven wat het outputformaat is van de bevraging.
        :type wt: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._lookup_serialize(
            id=id,
            fl=fl,
            fq=fq,
            wt=wt,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Free200Response",
            '400': "Free400Response",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _lookup_serialize(
        self,
        id,
        fl,
        fq,
        wt,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fq': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        if fl is not None:
            
            _query_params.append(('fl', fl))
            
        if fq is not None:
            
            _query_params.append(('fq', fq))
            
        if wt is not None:
            
            _query_params.append(('wt', wt))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml', 
                    'text/html', 
                    'text/plain'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/lookup',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def reverse_geocoder(
        self,
        x: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Hiermee wordt het coördinaat in X/Y (RD), of in lat/lon (WGS84) opgegeven. Vanaf dit coördinaat gaat de reverse geocoder zoeken. ")] = None,
        y: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Hiermee wordt het coördinaat in X/Y (RD), of in lat/lon (WGS84) opgegeven. Vanaf dit coördinaat gaat de reverse geocoder zoeken. ")] = None,
        lat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Hiermee wordt het coördinaat in X/Y (RD), of in lat/lon (WGS84) opgegeven. Vanaf dit coördinaat gaat de reverse geocoder zoeken. ")] = None,
        lon: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Hiermee wordt het coördinaat in X/Y (RD), of in lat/lon (WGS84) opgegeven. Vanaf dit coördinaat gaat de reverse geocoder zoeken. ")] = None,
        type: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Hiermee kan worden opgegeven welke resultaat types je terug krijgt in het resultaat. Voor elke type dat je wilt terugkrijgen moet je een aparte type parameter toevoegen, bijv. `type=adres&type=gemeente&type=perceel`. Met `type=*` krijg je alle types terug. Deze wordt voor het bepalen van de resultaten gebruikt en heeft dus geen invloed op aantal resultaten dat wordt teruggegeven. ")] = None,
        distance: Annotated[Optional[StrictInt], Field(description="Hiermee kan een maximale zoekstraal in meters worden opgegeven. Er zullen dan geen resultaten worden teruggegeven die verder liggen dan deze waarden. ")] = None,
        fl: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Hiermee worden de velden opgegeven die teruggegeven dienen te worden.")] = None,
        fq: Annotated[Optional[StrictStr], Field(description="Hiermee kan een filter query worden opgegeven, bijv. `fq=bron:BAG`. Deze wordt uitgevoerd nadat de dichtsbijzijnde resultaten zijn gevonden, dus resultaten die hier niet aan voldoen worden weggefilterd waardoor je minder resultaten dan het aantal rows kan terugkrijgen. ")] = None,
        start: Annotated[Optional[Annotated[int, Field(le=10000, strict=True)]], Field(description="Hiermee wordt opgegeven wat de index is van het eerste resultaat dat teruggegeven wordt. Dit is zero-based. In combinatie met de rows-parameter kunnen deze services gepagineerd worden bevraagd. Het maximum is \"10.000\". ")] = None,
        rows: Annotated[Optional[Annotated[int, Field(le=100, strict=True)]], Field(description="Hiermee wordt opgegeven wat het maximale aantal rijen (ofwel resultaten) is dat teruggegeven moet worden op deze bevraging. Het maximum is \"100\". ")] = None,
        wt: Annotated[Optional[StrictStr], Field(description="Hiermee wordt opgegeven wat het outputformaat is van de bevraging.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Free200Response:
        """De Reverse API biedt de mogelijkheid om een locatie (punt geometrie) op te geven om vervolgens verschillende gegevens in een range rondom deze locatie te ontvangen. 


        :param x: Hiermee wordt het coördinaat in X/Y (RD), of in lat/lon (WGS84) opgegeven. Vanaf dit coördinaat gaat de reverse geocoder zoeken. 
        :type x: float
        :param y: Hiermee wordt het coördinaat in X/Y (RD), of in lat/lon (WGS84) opgegeven. Vanaf dit coördinaat gaat de reverse geocoder zoeken. 
        :type y: float
        :param lat: Hiermee wordt het coördinaat in X/Y (RD), of in lat/lon (WGS84) opgegeven. Vanaf dit coördinaat gaat de reverse geocoder zoeken. 
        :type lat: float
        :param lon: Hiermee wordt het coördinaat in X/Y (RD), of in lat/lon (WGS84) opgegeven. Vanaf dit coördinaat gaat de reverse geocoder zoeken. 
        :type lon: float
        :param type: Hiermee kan worden opgegeven welke resultaat types je terug krijgt in het resultaat. Voor elke type dat je wilt terugkrijgen moet je een aparte type parameter toevoegen, bijv. `type=adres&type=gemeente&type=perceel`. Met `type=*` krijg je alle types terug. Deze wordt voor het bepalen van de resultaten gebruikt en heeft dus geen invloed op aantal resultaten dat wordt teruggegeven. 
        :type type: str
        :param distance: Hiermee kan een maximale zoekstraal in meters worden opgegeven. Er zullen dan geen resultaten worden teruggegeven die verder liggen dan deze waarden. 
        :type distance: int
        :param fl: Hiermee worden de velden opgegeven die teruggegeven dienen te worden.
        :type fl: str
        :param fq: Hiermee kan een filter query worden opgegeven, bijv. `fq=bron:BAG`. Deze wordt uitgevoerd nadat de dichtsbijzijnde resultaten zijn gevonden, dus resultaten die hier niet aan voldoen worden weggefilterd waardoor je minder resultaten dan het aantal rows kan terugkrijgen. 
        :type fq: str
        :param start: Hiermee wordt opgegeven wat de index is van het eerste resultaat dat teruggegeven wordt. Dit is zero-based. In combinatie met de rows-parameter kunnen deze services gepagineerd worden bevraagd. Het maximum is \"10.000\". 
        :type start: int
        :param rows: Hiermee wordt opgegeven wat het maximale aantal rijen (ofwel resultaten) is dat teruggegeven moet worden op deze bevraging. Het maximum is \"100\". 
        :type rows: int
        :param wt: Hiermee wordt opgegeven wat het outputformaat is van de bevraging.
        :type wt: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reverse_geocoder_serialize(
            x=x,
            y=y,
            lat=lat,
            lon=lon,
            type=type,
            distance=distance,
            fl=fl,
            fq=fq,
            start=start,
            rows=rows,
            wt=wt,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Free200Response",
            '400': "Free400Response",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def reverse_geocoder_with_http_info(
        self,
        x: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Hiermee wordt het coördinaat in X/Y (RD), of in lat/lon (WGS84) opgegeven. Vanaf dit coördinaat gaat de reverse geocoder zoeken. ")] = None,
        y: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Hiermee wordt het coördinaat in X/Y (RD), of in lat/lon (WGS84) opgegeven. Vanaf dit coördinaat gaat de reverse geocoder zoeken. ")] = None,
        lat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Hiermee wordt het coördinaat in X/Y (RD), of in lat/lon (WGS84) opgegeven. Vanaf dit coördinaat gaat de reverse geocoder zoeken. ")] = None,
        lon: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Hiermee wordt het coördinaat in X/Y (RD), of in lat/lon (WGS84) opgegeven. Vanaf dit coördinaat gaat de reverse geocoder zoeken. ")] = None,
        type: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Hiermee kan worden opgegeven welke resultaat types je terug krijgt in het resultaat. Voor elke type dat je wilt terugkrijgen moet je een aparte type parameter toevoegen, bijv. `type=adres&type=gemeente&type=perceel`. Met `type=*` krijg je alle types terug. Deze wordt voor het bepalen van de resultaten gebruikt en heeft dus geen invloed op aantal resultaten dat wordt teruggegeven. ")] = None,
        distance: Annotated[Optional[StrictInt], Field(description="Hiermee kan een maximale zoekstraal in meters worden opgegeven. Er zullen dan geen resultaten worden teruggegeven die verder liggen dan deze waarden. ")] = None,
        fl: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Hiermee worden de velden opgegeven die teruggegeven dienen te worden.")] = None,
        fq: Annotated[Optional[StrictStr], Field(description="Hiermee kan een filter query worden opgegeven, bijv. `fq=bron:BAG`. Deze wordt uitgevoerd nadat de dichtsbijzijnde resultaten zijn gevonden, dus resultaten die hier niet aan voldoen worden weggefilterd waardoor je minder resultaten dan het aantal rows kan terugkrijgen. ")] = None,
        start: Annotated[Optional[Annotated[int, Field(le=10000, strict=True)]], Field(description="Hiermee wordt opgegeven wat de index is van het eerste resultaat dat teruggegeven wordt. Dit is zero-based. In combinatie met de rows-parameter kunnen deze services gepagineerd worden bevraagd. Het maximum is \"10.000\". ")] = None,
        rows: Annotated[Optional[Annotated[int, Field(le=100, strict=True)]], Field(description="Hiermee wordt opgegeven wat het maximale aantal rijen (ofwel resultaten) is dat teruggegeven moet worden op deze bevraging. Het maximum is \"100\". ")] = None,
        wt: Annotated[Optional[StrictStr], Field(description="Hiermee wordt opgegeven wat het outputformaat is van de bevraging.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Free200Response]:
        """De Reverse API biedt de mogelijkheid om een locatie (punt geometrie) op te geven om vervolgens verschillende gegevens in een range rondom deze locatie te ontvangen. 


        :param x: Hiermee wordt het coördinaat in X/Y (RD), of in lat/lon (WGS84) opgegeven. Vanaf dit coördinaat gaat de reverse geocoder zoeken. 
        :type x: float
        :param y: Hiermee wordt het coördinaat in X/Y (RD), of in lat/lon (WGS84) opgegeven. Vanaf dit coördinaat gaat de reverse geocoder zoeken. 
        :type y: float
        :param lat: Hiermee wordt het coördinaat in X/Y (RD), of in lat/lon (WGS84) opgegeven. Vanaf dit coördinaat gaat de reverse geocoder zoeken. 
        :type lat: float
        :param lon: Hiermee wordt het coördinaat in X/Y (RD), of in lat/lon (WGS84) opgegeven. Vanaf dit coördinaat gaat de reverse geocoder zoeken. 
        :type lon: float
        :param type: Hiermee kan worden opgegeven welke resultaat types je terug krijgt in het resultaat. Voor elke type dat je wilt terugkrijgen moet je een aparte type parameter toevoegen, bijv. `type=adres&type=gemeente&type=perceel`. Met `type=*` krijg je alle types terug. Deze wordt voor het bepalen van de resultaten gebruikt en heeft dus geen invloed op aantal resultaten dat wordt teruggegeven. 
        :type type: str
        :param distance: Hiermee kan een maximale zoekstraal in meters worden opgegeven. Er zullen dan geen resultaten worden teruggegeven die verder liggen dan deze waarden. 
        :type distance: int
        :param fl: Hiermee worden de velden opgegeven die teruggegeven dienen te worden.
        :type fl: str
        :param fq: Hiermee kan een filter query worden opgegeven, bijv. `fq=bron:BAG`. Deze wordt uitgevoerd nadat de dichtsbijzijnde resultaten zijn gevonden, dus resultaten die hier niet aan voldoen worden weggefilterd waardoor je minder resultaten dan het aantal rows kan terugkrijgen. 
        :type fq: str
        :param start: Hiermee wordt opgegeven wat de index is van het eerste resultaat dat teruggegeven wordt. Dit is zero-based. In combinatie met de rows-parameter kunnen deze services gepagineerd worden bevraagd. Het maximum is \"10.000\". 
        :type start: int
        :param rows: Hiermee wordt opgegeven wat het maximale aantal rijen (ofwel resultaten) is dat teruggegeven moet worden op deze bevraging. Het maximum is \"100\". 
        :type rows: int
        :param wt: Hiermee wordt opgegeven wat het outputformaat is van de bevraging.
        :type wt: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reverse_geocoder_serialize(
            x=x,
            y=y,
            lat=lat,
            lon=lon,
            type=type,
            distance=distance,
            fl=fl,
            fq=fq,
            start=start,
            rows=rows,
            wt=wt,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Free200Response",
            '400': "Free400Response",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def reverse_geocoder_without_preload_content(
        self,
        x: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Hiermee wordt het coördinaat in X/Y (RD), of in lat/lon (WGS84) opgegeven. Vanaf dit coördinaat gaat de reverse geocoder zoeken. ")] = None,
        y: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Hiermee wordt het coördinaat in X/Y (RD), of in lat/lon (WGS84) opgegeven. Vanaf dit coördinaat gaat de reverse geocoder zoeken. ")] = None,
        lat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Hiermee wordt het coördinaat in X/Y (RD), of in lat/lon (WGS84) opgegeven. Vanaf dit coördinaat gaat de reverse geocoder zoeken. ")] = None,
        lon: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Hiermee wordt het coördinaat in X/Y (RD), of in lat/lon (WGS84) opgegeven. Vanaf dit coördinaat gaat de reverse geocoder zoeken. ")] = None,
        type: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Hiermee kan worden opgegeven welke resultaat types je terug krijgt in het resultaat. Voor elke type dat je wilt terugkrijgen moet je een aparte type parameter toevoegen, bijv. `type=adres&type=gemeente&type=perceel`. Met `type=*` krijg je alle types terug. Deze wordt voor het bepalen van de resultaten gebruikt en heeft dus geen invloed op aantal resultaten dat wordt teruggegeven. ")] = None,
        distance: Annotated[Optional[StrictInt], Field(description="Hiermee kan een maximale zoekstraal in meters worden opgegeven. Er zullen dan geen resultaten worden teruggegeven die verder liggen dan deze waarden. ")] = None,
        fl: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Hiermee worden de velden opgegeven die teruggegeven dienen te worden.")] = None,
        fq: Annotated[Optional[StrictStr], Field(description="Hiermee kan een filter query worden opgegeven, bijv. `fq=bron:BAG`. Deze wordt uitgevoerd nadat de dichtsbijzijnde resultaten zijn gevonden, dus resultaten die hier niet aan voldoen worden weggefilterd waardoor je minder resultaten dan het aantal rows kan terugkrijgen. ")] = None,
        start: Annotated[Optional[Annotated[int, Field(le=10000, strict=True)]], Field(description="Hiermee wordt opgegeven wat de index is van het eerste resultaat dat teruggegeven wordt. Dit is zero-based. In combinatie met de rows-parameter kunnen deze services gepagineerd worden bevraagd. Het maximum is \"10.000\". ")] = None,
        rows: Annotated[Optional[Annotated[int, Field(le=100, strict=True)]], Field(description="Hiermee wordt opgegeven wat het maximale aantal rijen (ofwel resultaten) is dat teruggegeven moet worden op deze bevraging. Het maximum is \"100\". ")] = None,
        wt: Annotated[Optional[StrictStr], Field(description="Hiermee wordt opgegeven wat het outputformaat is van de bevraging.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """De Reverse API biedt de mogelijkheid om een locatie (punt geometrie) op te geven om vervolgens verschillende gegevens in een range rondom deze locatie te ontvangen. 


        :param x: Hiermee wordt het coördinaat in X/Y (RD), of in lat/lon (WGS84) opgegeven. Vanaf dit coördinaat gaat de reverse geocoder zoeken. 
        :type x: float
        :param y: Hiermee wordt het coördinaat in X/Y (RD), of in lat/lon (WGS84) opgegeven. Vanaf dit coördinaat gaat de reverse geocoder zoeken. 
        :type y: float
        :param lat: Hiermee wordt het coördinaat in X/Y (RD), of in lat/lon (WGS84) opgegeven. Vanaf dit coördinaat gaat de reverse geocoder zoeken. 
        :type lat: float
        :param lon: Hiermee wordt het coördinaat in X/Y (RD), of in lat/lon (WGS84) opgegeven. Vanaf dit coördinaat gaat de reverse geocoder zoeken. 
        :type lon: float
        :param type: Hiermee kan worden opgegeven welke resultaat types je terug krijgt in het resultaat. Voor elke type dat je wilt terugkrijgen moet je een aparte type parameter toevoegen, bijv. `type=adres&type=gemeente&type=perceel`. Met `type=*` krijg je alle types terug. Deze wordt voor het bepalen van de resultaten gebruikt en heeft dus geen invloed op aantal resultaten dat wordt teruggegeven. 
        :type type: str
        :param distance: Hiermee kan een maximale zoekstraal in meters worden opgegeven. Er zullen dan geen resultaten worden teruggegeven die verder liggen dan deze waarden. 
        :type distance: int
        :param fl: Hiermee worden de velden opgegeven die teruggegeven dienen te worden.
        :type fl: str
        :param fq: Hiermee kan een filter query worden opgegeven, bijv. `fq=bron:BAG`. Deze wordt uitgevoerd nadat de dichtsbijzijnde resultaten zijn gevonden, dus resultaten die hier niet aan voldoen worden weggefilterd waardoor je minder resultaten dan het aantal rows kan terugkrijgen. 
        :type fq: str
        :param start: Hiermee wordt opgegeven wat de index is van het eerste resultaat dat teruggegeven wordt. Dit is zero-based. In combinatie met de rows-parameter kunnen deze services gepagineerd worden bevraagd. Het maximum is \"10.000\". 
        :type start: int
        :param rows: Hiermee wordt opgegeven wat het maximale aantal rijen (ofwel resultaten) is dat teruggegeven moet worden op deze bevraging. Het maximum is \"100\". 
        :type rows: int
        :param wt: Hiermee wordt opgegeven wat het outputformaat is van de bevraging.
        :type wt: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._reverse_geocoder_serialize(
            x=x,
            y=y,
            lat=lat,
            lon=lon,
            type=type,
            distance=distance,
            fl=fl,
            fq=fq,
            start=start,
            rows=rows,
            wt=wt,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Free200Response",
            '400': "Free400Response",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _reverse_geocoder_serialize(
        self,
        x,
        y,
        lat,
        lon,
        type,
        distance,
        fl,
        fq,
        start,
        rows,
        wt,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if x is not None:
            
            _query_params.append(('X', x))
            
        if y is not None:
            
            _query_params.append(('Y', y))
            
        if lat is not None:
            
            _query_params.append(('lat', lat))
            
        if lon is not None:
            
            _query_params.append(('lon', lon))
            
        if type is not None:
            
            _query_params.append(('type', type))
            
        if distance is not None:
            
            _query_params.append(('distance', distance))
            
        if fl is not None:
            
            _query_params.append(('fl', fl))
            
        if fq is not None:
            
            _query_params.append(('fq', fq))
            
        if start is not None:
            
            _query_params.append(('start', start))
            
        if rows is not None:
            
            _query_params.append(('rows', rows))
            
        if wt is not None:
            
            _query_params.append(('wt', wt))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml', 
                    'text/html', 
                    'text/plain'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/reverse',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    async def suggest(
        self,
        q: Annotated[str, Field(strict=True, max_length=400, description="Hiermee worden de zoektermen opgegeven. De Solr-syntax voor zoektermen kan hier worden toegepast, bijv. combineren met \"and\", en het gebruik van dubbele quotes voor opeenvolgende zoektermen. Zoektermen mogen incompleet zijn. Ook wordt er gebruik gemaakt van synoniemen.  Voorbeelden: `q=Utrecht`: geeft resultaten terug met de zoekterm Utrecht, bijv. adressen in de stad Utrecht, woonplaatsen en gemeenten in de provincie Utrecht.  `q=\"De Bilt\"`: geeft resultaten terug met de zoekterm De Bilt, bijv. de woonplaats en gemeente De Bilt, of adressen in deze woonplaats. Let op dat bij het daadwerkelijk verzenden van het request onder water de URL-encodingregels toegepast worden, dus een spatie wordt verzonden als een plusteken.  `q=\"Sint Jacob\" Utre`: geeft o.a. adressen terug waarvan er delen achtereenvolgens beginnen met \"Sint\" en \"Jacob\", of met \"St\" (synoniem) en \"Jacob\", en waar ook een deel met \"Utre\" begint. Een voorbeeld is het adres St.-Jacobsstraat 200 (officiële schrijfwijze) in Utrecht. ")],
        lat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Hiermee kan een coördinaat (in lat/lon, ofwel WGS84) worden opgegeven. Met behulp van deze parameters worden de gevonden zoekresultaten gesorteerd op afstand van het meegegeven punt. Wanneer de locatie van de gebruiker bekend is, kan op deze manier effectiever worden gezocht.  Het meegeven van een coördinaat is met name nuttig voor de suggest- en vrije geocoder-services. Hier worden meestal meerdere resultaten teruggegeven. Als decimaal scheidingsteken moet een punt worden opgegeven i.p.v. een komma.  Voorbeeld: `lat=52.09&lon=5.12`  De resultaten worden gesorteerd op afstand van een bepaald punt in het centrum van Utrecht. ")] = None,
        lon: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Hiermee kan een coördinaat (in lat/lon, ofwel WGS84) worden opgegeven. Met behulp van deze parameters worden de gevonden zoekresultaten gesorteerd op afstand van het meegegeven punt. Wanneer de locatie van de gebruiker bekend is, kan op deze manier effectiever worden gezocht.  Het meegeven van een coördinaat is met name nuttig voor de suggest- en vrije geocoder-services. Hier worden meestal meerdere resultaten teruggegeven. Als decimaal scheidingsteken moet een punt worden opgegeven i.p.v. een komma.  Voorbeeld: `lat=52.09&lon=5.12`  De resultaten worden gesorteerd op afstand van een bepaald punt in het centrum van Utrecht. ")] = None,
        fl: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Hiermee worden de velden opgegeven die teruggegeven dienen te worden.")] = None,
        fq: Annotated[Optional[List[StrictStr]], Field(description="Hiermee kan een filter query worden opgegeven, bijv. `fq=bron:BAG`.")] = None,
        qf: Annotated[Optional[StrictStr], Field(description="Met behulp van deze parameter kan aan bepaalde _velden_ een extra boost worden meegegeven. Hiermee kan de scoreberekening worden aangepast. ")] = None,
        bq: Annotated[Optional[List[StrictStr]], Field(description="Met behulp van deze parameter kan aan bepaalde _veldwaarden_ een extra boost worden meegegeven. Ook hiermee kan de scoreberekening worden aangepast.  Voor elke boost query moet een aparte `bq=<boost>` worden gebruikt. Bijvoorbeeld: `bq=type:gemeente^1.5&bq=type:woonplaats^1.5`. ")] = None,
        start: Annotated[Optional[Annotated[int, Field(le=10000, strict=True)]], Field(description="Hiermee wordt opgegeven wat de index is van het eerste resultaat dat teruggegeven wordt. Dit is zero-based. In combinatie met de rows-parameter kunnen deze services gepagineerd worden bevraagd. Hhet maximum is \"10.000\". ")] = None,
        rows: Annotated[Optional[Annotated[int, Field(le=3000, strict=True)]], Field(description="Hiermee wordt opgegeven wat het maximale aantal rijen (ofwel resultaten) is dat teruggegeven moet worden op deze bevraging. Het maximum is \"100\". ")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Hiermee kan worden opgegeven hoe de sortering plaatsvindt.")] = None,
        wt: Annotated[Optional[StrictStr], Field(description="Hiermee wordt opgegeven wat het outputformaat is van de bevraging.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Suggest200Response:
        """De Suggest API biedt de mogelijkheid om een (gedeelte van een) zoekopdracht op te voeren, waarnaar er suggesties teruggegeven worden. 


        :param q: Hiermee worden de zoektermen opgegeven. De Solr-syntax voor zoektermen kan hier worden toegepast, bijv. combineren met \"and\", en het gebruik van dubbele quotes voor opeenvolgende zoektermen. Zoektermen mogen incompleet zijn. Ook wordt er gebruik gemaakt van synoniemen.  Voorbeelden: `q=Utrecht`: geeft resultaten terug met de zoekterm Utrecht, bijv. adressen in de stad Utrecht, woonplaatsen en gemeenten in de provincie Utrecht.  `q=\"De Bilt\"`: geeft resultaten terug met de zoekterm De Bilt, bijv. de woonplaats en gemeente De Bilt, of adressen in deze woonplaats. Let op dat bij het daadwerkelijk verzenden van het request onder water de URL-encodingregels toegepast worden, dus een spatie wordt verzonden als een plusteken.  `q=\"Sint Jacob\" Utre`: geeft o.a. adressen terug waarvan er delen achtereenvolgens beginnen met \"Sint\" en \"Jacob\", of met \"St\" (synoniem) en \"Jacob\", en waar ook een deel met \"Utre\" begint. Een voorbeeld is het adres St.-Jacobsstraat 200 (officiële schrijfwijze) in Utrecht.  (required)
        :type q: str
        :param lat: Hiermee kan een coördinaat (in lat/lon, ofwel WGS84) worden opgegeven. Met behulp van deze parameters worden de gevonden zoekresultaten gesorteerd op afstand van het meegegeven punt. Wanneer de locatie van de gebruiker bekend is, kan op deze manier effectiever worden gezocht.  Het meegeven van een coördinaat is met name nuttig voor de suggest- en vrije geocoder-services. Hier worden meestal meerdere resultaten teruggegeven. Als decimaal scheidingsteken moet een punt worden opgegeven i.p.v. een komma.  Voorbeeld: `lat=52.09&lon=5.12`  De resultaten worden gesorteerd op afstand van een bepaald punt in het centrum van Utrecht. 
        :type lat: float
        :param lon: Hiermee kan een coördinaat (in lat/lon, ofwel WGS84) worden opgegeven. Met behulp van deze parameters worden de gevonden zoekresultaten gesorteerd op afstand van het meegegeven punt. Wanneer de locatie van de gebruiker bekend is, kan op deze manier effectiever worden gezocht.  Het meegeven van een coördinaat is met name nuttig voor de suggest- en vrije geocoder-services. Hier worden meestal meerdere resultaten teruggegeven. Als decimaal scheidingsteken moet een punt worden opgegeven i.p.v. een komma.  Voorbeeld: `lat=52.09&lon=5.12`  De resultaten worden gesorteerd op afstand van een bepaald punt in het centrum van Utrecht. 
        :type lon: float
        :param fl: Hiermee worden de velden opgegeven die teruggegeven dienen te worden.
        :type fl: str
        :param fq: Hiermee kan een filter query worden opgegeven, bijv. `fq=bron:BAG`.
        :type fq: List[str]
        :param qf: Met behulp van deze parameter kan aan bepaalde _velden_ een extra boost worden meegegeven. Hiermee kan de scoreberekening worden aangepast. 
        :type qf: str
        :param bq: Met behulp van deze parameter kan aan bepaalde _veldwaarden_ een extra boost worden meegegeven. Ook hiermee kan de scoreberekening worden aangepast.  Voor elke boost query moet een aparte `bq=<boost>` worden gebruikt. Bijvoorbeeld: `bq=type:gemeente^1.5&bq=type:woonplaats^1.5`. 
        :type bq: List[str]
        :param start: Hiermee wordt opgegeven wat de index is van het eerste resultaat dat teruggegeven wordt. Dit is zero-based. In combinatie met de rows-parameter kunnen deze services gepagineerd worden bevraagd. Hhet maximum is \"10.000\". 
        :type start: int
        :param rows: Hiermee wordt opgegeven wat het maximale aantal rijen (ofwel resultaten) is dat teruggegeven moet worden op deze bevraging. Het maximum is \"100\". 
        :type rows: int
        :param sort: Hiermee kan worden opgegeven hoe de sortering plaatsvindt.
        :type sort: str
        :param wt: Hiermee wordt opgegeven wat het outputformaat is van de bevraging.
        :type wt: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._suggest_serialize(
            q=q,
            lat=lat,
            lon=lon,
            fl=fl,
            fq=fq,
            qf=qf,
            bq=bq,
            start=start,
            rows=rows,
            sort=sort,
            wt=wt,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Suggest200Response",
            '400': "Free400Response",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    async def suggest_with_http_info(
        self,
        q: Annotated[str, Field(strict=True, max_length=400, description="Hiermee worden de zoektermen opgegeven. De Solr-syntax voor zoektermen kan hier worden toegepast, bijv. combineren met \"and\", en het gebruik van dubbele quotes voor opeenvolgende zoektermen. Zoektermen mogen incompleet zijn. Ook wordt er gebruik gemaakt van synoniemen.  Voorbeelden: `q=Utrecht`: geeft resultaten terug met de zoekterm Utrecht, bijv. adressen in de stad Utrecht, woonplaatsen en gemeenten in de provincie Utrecht.  `q=\"De Bilt\"`: geeft resultaten terug met de zoekterm De Bilt, bijv. de woonplaats en gemeente De Bilt, of adressen in deze woonplaats. Let op dat bij het daadwerkelijk verzenden van het request onder water de URL-encodingregels toegepast worden, dus een spatie wordt verzonden als een plusteken.  `q=\"Sint Jacob\" Utre`: geeft o.a. adressen terug waarvan er delen achtereenvolgens beginnen met \"Sint\" en \"Jacob\", of met \"St\" (synoniem) en \"Jacob\", en waar ook een deel met \"Utre\" begint. Een voorbeeld is het adres St.-Jacobsstraat 200 (officiële schrijfwijze) in Utrecht. ")],
        lat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Hiermee kan een coördinaat (in lat/lon, ofwel WGS84) worden opgegeven. Met behulp van deze parameters worden de gevonden zoekresultaten gesorteerd op afstand van het meegegeven punt. Wanneer de locatie van de gebruiker bekend is, kan op deze manier effectiever worden gezocht.  Het meegeven van een coördinaat is met name nuttig voor de suggest- en vrije geocoder-services. Hier worden meestal meerdere resultaten teruggegeven. Als decimaal scheidingsteken moet een punt worden opgegeven i.p.v. een komma.  Voorbeeld: `lat=52.09&lon=5.12`  De resultaten worden gesorteerd op afstand van een bepaald punt in het centrum van Utrecht. ")] = None,
        lon: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Hiermee kan een coördinaat (in lat/lon, ofwel WGS84) worden opgegeven. Met behulp van deze parameters worden de gevonden zoekresultaten gesorteerd op afstand van het meegegeven punt. Wanneer de locatie van de gebruiker bekend is, kan op deze manier effectiever worden gezocht.  Het meegeven van een coördinaat is met name nuttig voor de suggest- en vrije geocoder-services. Hier worden meestal meerdere resultaten teruggegeven. Als decimaal scheidingsteken moet een punt worden opgegeven i.p.v. een komma.  Voorbeeld: `lat=52.09&lon=5.12`  De resultaten worden gesorteerd op afstand van een bepaald punt in het centrum van Utrecht. ")] = None,
        fl: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Hiermee worden de velden opgegeven die teruggegeven dienen te worden.")] = None,
        fq: Annotated[Optional[List[StrictStr]], Field(description="Hiermee kan een filter query worden opgegeven, bijv. `fq=bron:BAG`.")] = None,
        qf: Annotated[Optional[StrictStr], Field(description="Met behulp van deze parameter kan aan bepaalde _velden_ een extra boost worden meegegeven. Hiermee kan de scoreberekening worden aangepast. ")] = None,
        bq: Annotated[Optional[List[StrictStr]], Field(description="Met behulp van deze parameter kan aan bepaalde _veldwaarden_ een extra boost worden meegegeven. Ook hiermee kan de scoreberekening worden aangepast.  Voor elke boost query moet een aparte `bq=<boost>` worden gebruikt. Bijvoorbeeld: `bq=type:gemeente^1.5&bq=type:woonplaats^1.5`. ")] = None,
        start: Annotated[Optional[Annotated[int, Field(le=10000, strict=True)]], Field(description="Hiermee wordt opgegeven wat de index is van het eerste resultaat dat teruggegeven wordt. Dit is zero-based. In combinatie met de rows-parameter kunnen deze services gepagineerd worden bevraagd. Hhet maximum is \"10.000\". ")] = None,
        rows: Annotated[Optional[Annotated[int, Field(le=3000, strict=True)]], Field(description="Hiermee wordt opgegeven wat het maximale aantal rijen (ofwel resultaten) is dat teruggegeven moet worden op deze bevraging. Het maximum is \"100\". ")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Hiermee kan worden opgegeven hoe de sortering plaatsvindt.")] = None,
        wt: Annotated[Optional[StrictStr], Field(description="Hiermee wordt opgegeven wat het outputformaat is van de bevraging.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Suggest200Response]:
        """De Suggest API biedt de mogelijkheid om een (gedeelte van een) zoekopdracht op te voeren, waarnaar er suggesties teruggegeven worden. 


        :param q: Hiermee worden de zoektermen opgegeven. De Solr-syntax voor zoektermen kan hier worden toegepast, bijv. combineren met \"and\", en het gebruik van dubbele quotes voor opeenvolgende zoektermen. Zoektermen mogen incompleet zijn. Ook wordt er gebruik gemaakt van synoniemen.  Voorbeelden: `q=Utrecht`: geeft resultaten terug met de zoekterm Utrecht, bijv. adressen in de stad Utrecht, woonplaatsen en gemeenten in de provincie Utrecht.  `q=\"De Bilt\"`: geeft resultaten terug met de zoekterm De Bilt, bijv. de woonplaats en gemeente De Bilt, of adressen in deze woonplaats. Let op dat bij het daadwerkelijk verzenden van het request onder water de URL-encodingregels toegepast worden, dus een spatie wordt verzonden als een plusteken.  `q=\"Sint Jacob\" Utre`: geeft o.a. adressen terug waarvan er delen achtereenvolgens beginnen met \"Sint\" en \"Jacob\", of met \"St\" (synoniem) en \"Jacob\", en waar ook een deel met \"Utre\" begint. Een voorbeeld is het adres St.-Jacobsstraat 200 (officiële schrijfwijze) in Utrecht.  (required)
        :type q: str
        :param lat: Hiermee kan een coördinaat (in lat/lon, ofwel WGS84) worden opgegeven. Met behulp van deze parameters worden de gevonden zoekresultaten gesorteerd op afstand van het meegegeven punt. Wanneer de locatie van de gebruiker bekend is, kan op deze manier effectiever worden gezocht.  Het meegeven van een coördinaat is met name nuttig voor de suggest- en vrije geocoder-services. Hier worden meestal meerdere resultaten teruggegeven. Als decimaal scheidingsteken moet een punt worden opgegeven i.p.v. een komma.  Voorbeeld: `lat=52.09&lon=5.12`  De resultaten worden gesorteerd op afstand van een bepaald punt in het centrum van Utrecht. 
        :type lat: float
        :param lon: Hiermee kan een coördinaat (in lat/lon, ofwel WGS84) worden opgegeven. Met behulp van deze parameters worden de gevonden zoekresultaten gesorteerd op afstand van het meegegeven punt. Wanneer de locatie van de gebruiker bekend is, kan op deze manier effectiever worden gezocht.  Het meegeven van een coördinaat is met name nuttig voor de suggest- en vrije geocoder-services. Hier worden meestal meerdere resultaten teruggegeven. Als decimaal scheidingsteken moet een punt worden opgegeven i.p.v. een komma.  Voorbeeld: `lat=52.09&lon=5.12`  De resultaten worden gesorteerd op afstand van een bepaald punt in het centrum van Utrecht. 
        :type lon: float
        :param fl: Hiermee worden de velden opgegeven die teruggegeven dienen te worden.
        :type fl: str
        :param fq: Hiermee kan een filter query worden opgegeven, bijv. `fq=bron:BAG`.
        :type fq: List[str]
        :param qf: Met behulp van deze parameter kan aan bepaalde _velden_ een extra boost worden meegegeven. Hiermee kan de scoreberekening worden aangepast. 
        :type qf: str
        :param bq: Met behulp van deze parameter kan aan bepaalde _veldwaarden_ een extra boost worden meegegeven. Ook hiermee kan de scoreberekening worden aangepast.  Voor elke boost query moet een aparte `bq=<boost>` worden gebruikt. Bijvoorbeeld: `bq=type:gemeente^1.5&bq=type:woonplaats^1.5`. 
        :type bq: List[str]
        :param start: Hiermee wordt opgegeven wat de index is van het eerste resultaat dat teruggegeven wordt. Dit is zero-based. In combinatie met de rows-parameter kunnen deze services gepagineerd worden bevraagd. Hhet maximum is \"10.000\". 
        :type start: int
        :param rows: Hiermee wordt opgegeven wat het maximale aantal rijen (ofwel resultaten) is dat teruggegeven moet worden op deze bevraging. Het maximum is \"100\". 
        :type rows: int
        :param sort: Hiermee kan worden opgegeven hoe de sortering plaatsvindt.
        :type sort: str
        :param wt: Hiermee wordt opgegeven wat het outputformaat is van de bevraging.
        :type wt: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._suggest_serialize(
            q=q,
            lat=lat,
            lon=lon,
            fl=fl,
            fq=fq,
            qf=qf,
            bq=bq,
            start=start,
            rows=rows,
            sort=sort,
            wt=wt,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Suggest200Response",
            '400': "Free400Response",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    async def suggest_without_preload_content(
        self,
        q: Annotated[str, Field(strict=True, max_length=400, description="Hiermee worden de zoektermen opgegeven. De Solr-syntax voor zoektermen kan hier worden toegepast, bijv. combineren met \"and\", en het gebruik van dubbele quotes voor opeenvolgende zoektermen. Zoektermen mogen incompleet zijn. Ook wordt er gebruik gemaakt van synoniemen.  Voorbeelden: `q=Utrecht`: geeft resultaten terug met de zoekterm Utrecht, bijv. adressen in de stad Utrecht, woonplaatsen en gemeenten in de provincie Utrecht.  `q=\"De Bilt\"`: geeft resultaten terug met de zoekterm De Bilt, bijv. de woonplaats en gemeente De Bilt, of adressen in deze woonplaats. Let op dat bij het daadwerkelijk verzenden van het request onder water de URL-encodingregels toegepast worden, dus een spatie wordt verzonden als een plusteken.  `q=\"Sint Jacob\" Utre`: geeft o.a. adressen terug waarvan er delen achtereenvolgens beginnen met \"Sint\" en \"Jacob\", of met \"St\" (synoniem) en \"Jacob\", en waar ook een deel met \"Utre\" begint. Een voorbeeld is het adres St.-Jacobsstraat 200 (officiële schrijfwijze) in Utrecht. ")],
        lat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Hiermee kan een coördinaat (in lat/lon, ofwel WGS84) worden opgegeven. Met behulp van deze parameters worden de gevonden zoekresultaten gesorteerd op afstand van het meegegeven punt. Wanneer de locatie van de gebruiker bekend is, kan op deze manier effectiever worden gezocht.  Het meegeven van een coördinaat is met name nuttig voor de suggest- en vrije geocoder-services. Hier worden meestal meerdere resultaten teruggegeven. Als decimaal scheidingsteken moet een punt worden opgegeven i.p.v. een komma.  Voorbeeld: `lat=52.09&lon=5.12`  De resultaten worden gesorteerd op afstand van een bepaald punt in het centrum van Utrecht. ")] = None,
        lon: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Hiermee kan een coördinaat (in lat/lon, ofwel WGS84) worden opgegeven. Met behulp van deze parameters worden de gevonden zoekresultaten gesorteerd op afstand van het meegegeven punt. Wanneer de locatie van de gebruiker bekend is, kan op deze manier effectiever worden gezocht.  Het meegeven van een coördinaat is met name nuttig voor de suggest- en vrije geocoder-services. Hier worden meestal meerdere resultaten teruggegeven. Als decimaal scheidingsteken moet een punt worden opgegeven i.p.v. een komma.  Voorbeeld: `lat=52.09&lon=5.12`  De resultaten worden gesorteerd op afstand van een bepaald punt in het centrum van Utrecht. ")] = None,
        fl: Annotated[Optional[Annotated[str, Field(strict=True)]], Field(description="Hiermee worden de velden opgegeven die teruggegeven dienen te worden.")] = None,
        fq: Annotated[Optional[List[StrictStr]], Field(description="Hiermee kan een filter query worden opgegeven, bijv. `fq=bron:BAG`.")] = None,
        qf: Annotated[Optional[StrictStr], Field(description="Met behulp van deze parameter kan aan bepaalde _velden_ een extra boost worden meegegeven. Hiermee kan de scoreberekening worden aangepast. ")] = None,
        bq: Annotated[Optional[List[StrictStr]], Field(description="Met behulp van deze parameter kan aan bepaalde _veldwaarden_ een extra boost worden meegegeven. Ook hiermee kan de scoreberekening worden aangepast.  Voor elke boost query moet een aparte `bq=<boost>` worden gebruikt. Bijvoorbeeld: `bq=type:gemeente^1.5&bq=type:woonplaats^1.5`. ")] = None,
        start: Annotated[Optional[Annotated[int, Field(le=10000, strict=True)]], Field(description="Hiermee wordt opgegeven wat de index is van het eerste resultaat dat teruggegeven wordt. Dit is zero-based. In combinatie met de rows-parameter kunnen deze services gepagineerd worden bevraagd. Hhet maximum is \"10.000\". ")] = None,
        rows: Annotated[Optional[Annotated[int, Field(le=3000, strict=True)]], Field(description="Hiermee wordt opgegeven wat het maximale aantal rijen (ofwel resultaten) is dat teruggegeven moet worden op deze bevraging. Het maximum is \"100\". ")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Hiermee kan worden opgegeven hoe de sortering plaatsvindt.")] = None,
        wt: Annotated[Optional[StrictStr], Field(description="Hiermee wordt opgegeven wat het outputformaat is van de bevraging.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """De Suggest API biedt de mogelijkheid om een (gedeelte van een) zoekopdracht op te voeren, waarnaar er suggesties teruggegeven worden. 


        :param q: Hiermee worden de zoektermen opgegeven. De Solr-syntax voor zoektermen kan hier worden toegepast, bijv. combineren met \"and\", en het gebruik van dubbele quotes voor opeenvolgende zoektermen. Zoektermen mogen incompleet zijn. Ook wordt er gebruik gemaakt van synoniemen.  Voorbeelden: `q=Utrecht`: geeft resultaten terug met de zoekterm Utrecht, bijv. adressen in de stad Utrecht, woonplaatsen en gemeenten in de provincie Utrecht.  `q=\"De Bilt\"`: geeft resultaten terug met de zoekterm De Bilt, bijv. de woonplaats en gemeente De Bilt, of adressen in deze woonplaats. Let op dat bij het daadwerkelijk verzenden van het request onder water de URL-encodingregels toegepast worden, dus een spatie wordt verzonden als een plusteken.  `q=\"Sint Jacob\" Utre`: geeft o.a. adressen terug waarvan er delen achtereenvolgens beginnen met \"Sint\" en \"Jacob\", of met \"St\" (synoniem) en \"Jacob\", en waar ook een deel met \"Utre\" begint. Een voorbeeld is het adres St.-Jacobsstraat 200 (officiële schrijfwijze) in Utrecht.  (required)
        :type q: str
        :param lat: Hiermee kan een coördinaat (in lat/lon, ofwel WGS84) worden opgegeven. Met behulp van deze parameters worden de gevonden zoekresultaten gesorteerd op afstand van het meegegeven punt. Wanneer de locatie van de gebruiker bekend is, kan op deze manier effectiever worden gezocht.  Het meegeven van een coördinaat is met name nuttig voor de suggest- en vrije geocoder-services. Hier worden meestal meerdere resultaten teruggegeven. Als decimaal scheidingsteken moet een punt worden opgegeven i.p.v. een komma.  Voorbeeld: `lat=52.09&lon=5.12`  De resultaten worden gesorteerd op afstand van een bepaald punt in het centrum van Utrecht. 
        :type lat: float
        :param lon: Hiermee kan een coördinaat (in lat/lon, ofwel WGS84) worden opgegeven. Met behulp van deze parameters worden de gevonden zoekresultaten gesorteerd op afstand van het meegegeven punt. Wanneer de locatie van de gebruiker bekend is, kan op deze manier effectiever worden gezocht.  Het meegeven van een coördinaat is met name nuttig voor de suggest- en vrije geocoder-services. Hier worden meestal meerdere resultaten teruggegeven. Als decimaal scheidingsteken moet een punt worden opgegeven i.p.v. een komma.  Voorbeeld: `lat=52.09&lon=5.12`  De resultaten worden gesorteerd op afstand van een bepaald punt in het centrum van Utrecht. 
        :type lon: float
        :param fl: Hiermee worden de velden opgegeven die teruggegeven dienen te worden.
        :type fl: str
        :param fq: Hiermee kan een filter query worden opgegeven, bijv. `fq=bron:BAG`.
        :type fq: List[str]
        :param qf: Met behulp van deze parameter kan aan bepaalde _velden_ een extra boost worden meegegeven. Hiermee kan de scoreberekening worden aangepast. 
        :type qf: str
        :param bq: Met behulp van deze parameter kan aan bepaalde _veldwaarden_ een extra boost worden meegegeven. Ook hiermee kan de scoreberekening worden aangepast.  Voor elke boost query moet een aparte `bq=<boost>` worden gebruikt. Bijvoorbeeld: `bq=type:gemeente^1.5&bq=type:woonplaats^1.5`. 
        :type bq: List[str]
        :param start: Hiermee wordt opgegeven wat de index is van het eerste resultaat dat teruggegeven wordt. Dit is zero-based. In combinatie met de rows-parameter kunnen deze services gepagineerd worden bevraagd. Hhet maximum is \"10.000\". 
        :type start: int
        :param rows: Hiermee wordt opgegeven wat het maximale aantal rijen (ofwel resultaten) is dat teruggegeven moet worden op deze bevraging. Het maximum is \"100\". 
        :type rows: int
        :param sort: Hiermee kan worden opgegeven hoe de sortering plaatsvindt.
        :type sort: str
        :param wt: Hiermee wordt opgegeven wat het outputformaat is van de bevraging.
        :type wt: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._suggest_serialize(
            q=q,
            lat=lat,
            lon=lon,
            fl=fl,
            fq=fq,
            qf=qf,
            bq=bq,
            start=start,
            rows=rows,
            sort=sort,
            wt=wt,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Suggest200Response",
            '400': "Free400Response",
        }
        response_data = await self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _suggest_serialize(
        self,
        q,
        lat,
        lon,
        fl,
        fq,
        qf,
        bq,
        start,
        rows,
        sort,
        wt,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'fq': 'multi',
            'bq': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if q is not None:
            
            _query_params.append(('q', q))
            
        if lat is not None:
            
            _query_params.append(('lat', lat))
            
        if lon is not None:
            
            _query_params.append(('lon', lon))
            
        if fl is not None:
            
            _query_params.append(('fl', fl))
            
        if fq is not None:
            
            _query_params.append(('fq', fq))
            
        if qf is not None:
            
            _query_params.append(('qf', qf))
            
        if bq is not None:
            
            _query_params.append(('bq', bq))
            
        if start is not None:
            
            _query_params.append(('start', start))
            
        if rows is not None:
            
            _query_params.append(('rows', rows))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if wt is not None:
            
            _query_params.append(('wt', wt))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml', 
                    'text/html', 
                    'text/plain'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/suggest',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


