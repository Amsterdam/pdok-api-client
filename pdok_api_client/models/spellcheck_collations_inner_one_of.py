# coding: utf-8

"""
    Locatieserver

    De PDOK Locatieserver is een open en gratis geocodeerservice waarmee gezocht kan worden op gegevens uit verschillende overheidsregistraties (bijvoorbeeld adressen, percelen en rijkswegen) om vervolgens doorgestuurd te worden naar de locatie van de zoekopdracht.  De Locatieserver bestaat uit meerdere RESTful API's die eenvoudig geïntegreerd kunnen worden in viewers en/of applicaties. De API's zijn open, gratis en bevatten gegevens uit verschillende overheidsregistraties zoals adressen (postcodes, straten, huisnummer), kadastrale percelen, wegen en hectometerpalen maar ook woonplaatsen, wijken, buurten en waterschappen. De onderliggende gegevens worden zeer frequent bijgewerkt.  De Locatieserver bestaat totaal uit vier RESTful API's die gepubliceerd worden volgens de Open API Specificatie [https://api.pdok.nl/bzk/locatieserver/search/v3_1/ui/](https://api.pdok.nl/bzk/locatieserver/search/v3_1/ui/). Hiermee zijn de mogelijkheden van de Locatieserver API's (input en output) gedocumenteerd.  Het zoeken op gegevens wordt vereenvoudigd met behulp van de **Suggest API** die de mogelijkheid biedt om een (gedeelte van een) zoekopdracht op te voeren, waarnaar er suggesties teruggegeven worden. Dankzij slimme technieken als auto-aanvullen en ondersteuning van alternatieve schrijfwijzen en synoniemen vinden gebruikers snel waar ze naar op zoek zijn. Het is ook mogelijk om bij zoekopdrachten een locatie van de gebruiker mee te geven zodat suggesties op basis van die locatie worden gesorteerd.  Zodra er op basis van suggesties van de Suggest API een keuze is gemaakt, wordt de **Lookup API** aangeroepen, welke o.a. een (versimpelde) geometrie van de zoekopdracht teruggeeft. Hiermee kan een gebruiker naar de locatie van de zoekopdracht worden gestuurd op de kaart. Dankzij de highlight functie kan het betreffende gegeven (object) vervolgens worden opgelicht op de kaart.  De suggest- en de lookup API werken dus als een tweetrapsraket. Er is ook een mogelijkheid om vrij te zoeken (klassiek geocoderen) met de **Free API** waar zonder tussenkomst van suggesties de API direct resultaten teruggeeft op basis van de zoekopdracht.  De **Reverse API** biedt de mogelijkheid om een locatie (punt geometrie) op te geven om vervolgens verschillende gegevens in een range rondom deze locatie te ontvangen. Bijvoorbeeld het ophalen van alle adressen of wegen in de buurt (op basis van de opgegeven locatie). Dit wordt ook wel Reverse Geocoderen genoemd. Met de **Reverse API** kan je op basis van een coördinaat en een range (bijvoorbeeld 1 kilometer) de gewenste gegevens binnen die range opvragen en visualiseren.  De Locatieserver is primair een geocodeerservice. Voor andere doeleinden zoals het rechtstreeks opvragen van bepaalde gegevens of het downloaden van bulk data biedt PDOK andere mogelijkheden via webservices en/of downloads.  Meer informatie over de Locatieserver is ook te vinden op de Locatieserver Wiki op [Github](https://github.com/PDOK/locatieserver/wiki/API-Locatieserver) of volg discussies op het [PDOK forum](https://geoforum.nl/c/applicaties-en-diensten/locatieserver/27). 

    The version of the OpenAPI document: v3_1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SpellcheckCollationsInnerOneOf(BaseModel):
    """
    SpellcheckCollationsInnerOneOf
    """ # noqa: E501
    collation_query: Optional[StrictStr] = Field(default=None, alias="collationQuery")
    hits: Optional[StrictInt] = None
    misspellings_and_corrections: Optional[List[StrictStr]] = Field(default=None, alias="misspellingsAndCorrections")
    __properties: ClassVar[List[str]] = ["collationQuery", "hits", "misspellingsAndCorrections"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SpellcheckCollationsInnerOneOf from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SpellcheckCollationsInnerOneOf from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "collationQuery": obj.get("collationQuery"),
            "hits": obj.get("hits"),
            "misspellingsAndCorrections": obj.get("misspellingsAndCorrections")
        })
        return _obj


